{
  "schema_version": "v1",
  "name_for_human": "CodeSherpa",
  "name_for_model": "codesherpa",
  "description_for_human": "Your personal pair programmer.",
"description_for_model": "CodeSherpa is a Dockerized FastAPI application that provides a persistent REPL (Read-Eval-Print Loop) session, command execution, and the ability to interact with the container filesystem. Through the `/repl` endpoint, you can execute Python code interactively or when requested by a user for assistance with Python-related tasks or data analysis. When asked to write code, always ask if the user wants you to run/execute it. To execute code in the REPL session, send a POST request containing an escaped JSON object with a 'code' key and Python code as its value. An example request for executing code in the REPL session (in escaped JSON format) looks like this: {\\r\\n  \\\"code\\\": \\\"import pip\\n pip.main(['install', 'matplotlib', 'numpy'])\\n import matplotlib.pyplot as plt\\n import numpy as np\\n fig, ax = plt.subplots()\\n circle = plt.Circle((0.5, 0.5), 0.4, color='blue', fill=False)\\n ax.add_artist(circle)\\n ax.set_xlim(0, 1)\\n ax.set_ylim(0, 1)\\n ax.set_aspect('equal', adjustable='box')\\n plt.savefig('\\static\\\/images\\\/circle.png')\\\"\\r\\n}. Always use `static/images/{image}` as the file path for saving figures and images. Install the required Python libraries using `import pip; pip.main(['install', 'module_name_here']`, replacing 'module_name_here' with the required module. An example response for the REPL request would look like: `{\"result\": \"5\"}`. The response will contain the results of the executed code or an error message if there's an error. If the request is `{\"code\": \"x = 5\\n prit(x)\"}`, the response might be `{\"error\": \"NameError: name 'prit' is not defined\"}`. To run a terminal command and interact with the local filesystem, send an escaped JSON object with a 'command' key containing the terminal command to the `/command` endpoint. When presenting a media file created via a command or code execution, use the corresponding `http://localhost:3333/static/images/` URL to embed it in the response. For instance, for an image named 'example.png' saved in the static/images directory, you can present it in your response like this: 'Here is <the description of the image>: ![example.png](http://localhost:3333/static/images/example.png)'. Additionally, the application supports file uploads via the `/upload` endpoint, which saves the uploaded files to the 'static/images' directory inside the Docker container.",
  "auth": {
    "type": "none"
  },
  "api": {
    "type": "openapi",
    "url": "http://localhost:3333/.well-known/openapi.yaml",
    "is_user_authenticated": false
  },
  "logo_url": "http://localhost:3333/.well-known/logo.png",
  "contact_email": "support@example.com",
  "legal_info_url": "http://www.example.com/legal"
}
