diff --git a/localserver/main.py b/localserver/main.py
index 0e3bcc5..c22e26c 100644
--- a/localserver/main.py
+++ b/localserver/main.py
@@ -6,9 +6,11 @@ import io
 import sys
 import code
 import subprocess
+import shutil
+from typing import List
 from contextlib import redirect_stderr, redirect_stdout
 
-from fastapi import FastAPI
+from fastapi import FastAPI, File, UploadFile
 from fastapi.middleware.cors import CORSMiddleware
 from fastapi.responses import FileResponse
 from fastapi.staticfiles import StaticFiles
@@ -18,7 +20,6 @@ import uvicorn
 from models.api import CodeExecutionRequest, CommandExecutionRequest
 from executors.executor import PythonExecutor, CppExecutor, RustExecutor
 
-
 logger.configure(handlers=[{"sink": sys.stderr, "format": "<green>{time}</green> <level>{message}</level>", "colorize": True}])
 
 app = FastAPI()
@@ -46,6 +47,31 @@ app.add_middleware(
     allow_headers=["*"],
 )
 
+
+
+# New endpoint for handling file uploads
+@app.post("/upload")
+async def upload_files(files: List[UploadFile] = File(...), max_total_size: int = 1000000):
+    """
+    Endpoint to upload multiple files with an upper bound on total file size.
+
+    Args:
+        files (List[UploadFile]): List of uploaded files.
+        max_total_size (int): Maximum total size of uploaded files in bytes.
+
+    Returns:
+        dict: The result of the file upload process.
+    """
+    total_size = sum(file.file._file.tell() for file in files)
+    if total_size > max_total_size:
+        return {"error": "Total file size exceeds the limit"}
+
+    for file in files:
+        with open(file.filename, "wb") as buffer:
+            shutil.copyfileobj(file.file, buffer)
+
+    return {"message": "Files uploaded successfully", "total_size": total_size}
+
 @app.get("/.well-known/ai-plugin.json")
 async def get_manifest():
     """
